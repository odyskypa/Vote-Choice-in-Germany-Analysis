typeof(gles$egoposition_immigration)
typeof(gles$ostwest)
typeof(gles$political_interest)
typeof(gles$income)
typeof(gles$gender)
# Chunk 4: missingData
ll <- which( gles$vote=="NA"); length(ll)
ll <- which( gles$egoposition_immigration=="NA"); length(ll)
ll <- which( gles$ostwest=="NA"); length(ll)
ll <- which( gles$political_interest=="NA"); length(ll)
ll <- which( gles$income=="NA"); length(ll)
ll <- which( gles$gender=="NA"); length(ll)
# Chunk 5: checkingDuplicates
dupli <- duplicated(gles); dupli_ind <- which(dupli); length(dupli_ind)
# Chunk 6: presentDuplicate
gles[dupli_ind,][1:5,]
# Chunk 7: createDuplicateFactor
gles$f.duplicate<-0; gles$f.duplicate[dupli_ind]<-1
gles$f.duplicate<-factor(gles$f.duplicate,labels=c("No.Duplicate","Yes.Duplicate"))
# Chunk 8: uniqueValeusOfVariables
unique(gles$vote); unique(gles$egoposition_immigration); unique(gles$ostwest)
unique(gles$political_interest); unique(gles$income); unique(gles$gender)
# Chunk 9: ostwestToFactor
gles$f.eastGermany<-0; gles$f.eastGermany[gles$ostwest=="1"]<-1
gles$f.eastGermany<-factor(gles$f.eastGermany,
labels=c("No.EastGermany","Yes.EastGermany"))
# Chunk 10: genderToFactor
gles$f.gender<-0; gles$f.gender[gles$gender=="1"]<-1
gles$f.gender<-factor(gles$f.gender, labels=c("M","F"))
# Chunk 11: incomeToOrderedFactor
gles$f.income <- ordered(gles$income, levels=c(0, 1, 2, 3, 4),
labels=c("Low.Sat", "Low_to_Medium.Sat",
"Medium.Sat", "Medium_to_High.Sat",
"High.Sat"))
# Chunk 12: politicalInterestToOrderedFactor
gles$f.political_interest <- ordered(gles$political_interest,
levels=c(0, 1, 2, 3, 4),
labels=c("Low.Inter",
"Low_to_Medium.Inter",
"Medium.Inter",
"Medium_to_High.Inter",
"High.Inter"))
# Chunk 13: egoPositionToOrderedFactor
gles$f.egoposition_immigration <- ordered(gles$egoposition_immigration,
levels=c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
labels=c("0_Very_Open_Level.Imm",
"1_Level.Imm",
"2_Level.Imm",
"3_Level.Imm",
"4_Level.Imm",
"5_Neutral_Level.Imm",
"6_Level.Imm",
"7_Level.Imm",
"8_Level.Imm",
"9_Level.Imm",
"10_Very_Restrictive_Level.Imm"))
# Chunk 14: voteToFactor
gles$f.vote<-as.factor(gles$vote)
# Chunk 15: voteToPoliticalOrientationFactor
gles$f.political_orientation<-0 #center
gles$f.political_orientation[gles$vote=="Gruene" | gles$vote=="LINKE"]<-1 #left
gles$f.political_orientation[gles$vote=="AfD"]<-2 #right
gles$f.political_orientation<-factor(gles$f.political_orientation,
labels=c("Center_Wing","Left_Wing",
"Right_Wing"))
# Chunk 16: removingCHRVariables
gles$vote <- NULL #delete vote
gles$ostwest <- NULL #delete ostwest
gles$gender <- NULL #delete gender
# Chunk 17: glesSumm
summary(gles)
# Chunk 18: quantitativeData
quantiData = gles[c('egoposition_immigration', 'political_interest', 'income')]
#quantiData
# Chunk 19: standardDeviation
lapply(quantiData, sd)
# Chunk 20: summaries
summary(gles$egoposition_immigration)
summary(gles$political_interest)
summary(gles$income)
# Chunk 21: histogramms
hEgo <- ggplot(gles, aes(x=egoposition_immigration)) +
geom_histogram(color="black", fill="#00AFBB")
hPoli <-ggplot(gles, aes(x=political_interest)) +
geom_histogram(color="black", fill="#00AFBB")
hIncome <- ggplot(gles, aes(x=income)) +
geom_histogram(color="black", fill="#00AFBB")
ggarrange(hEgo, hPoli, hIncome,
ncol = 1, nrow = 3)
# Chunk 22: corrPlot
M <- cor(gles[,c(1:3)],method="spearman");M #Non Parametric version
corrplot(M, method="circle")
# Chunk 23: barPlots
gg_east <- ggplot(gles, aes(x = f.eastGermany)) +
geom_bar(fill = "#00AFBB",
color="black") +
labs(x = "People Living in East Germany",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=1))
gg_gender <- ggplot(gles, aes(x = f.gender)) +
geom_bar(fill = "#00AFBB",
color="black") +
labs(x = "Gender of Individuals",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=1))
gg_political_or <- ggplot(gles, aes(x = f.political_orientation)) +
geom_bar(fill = "#00AFBB",
color="black") +
labs(x = "Political Orientation (New Vote Variable)",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=1))
gg_vote <- ggplot(gles, aes(x = f.vote)) +
geom_bar(fill = "#00AFBB",
color="black") +
labs(x = "Votes",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=1))
ggarrange(gg_east, gg_gender, gg_political_or, gg_vote, ncol = 2, nrow = 2)
# Chunk 24: calcQFunction
calcQ <- function(x) {
s.x <- summary(x)
iqr<-s.x[5]-s.x[2]
list(souti=s.x[2]-3*iqr, mouti=s.x[2]-1.5*iqr, min=s.x[1], q1=s.x[2], q2=s.x[3],
q3=s.x[5], max=s.x[6], mouts=s.x[5]+1.5*iqr, souts=s.x[5]+3*iqr ) }
# Chunk 25: uniOutEgoBoxPlot
boxplot(gles$egoposition_immigration, main = "Boxplot of Variable Egoposition Inmigration")
# Chunk 26: uniOutEgoIQR
var_out<-calcQ(gles$egoposition_immigration)
llout_ego<-which((gles$egoposition_immigration<var_out$souti)|(gles$egoposition_immigration>var_out$souts))
length(llout_ego)
# Chunk 27: uniOutPoliBoxPlot
boxplot(gles$political_interest, main = "Boxplot of Variable Political Interest")
var_out<-calcQ(gles$political_interest)
llout_political<-which((gles$political_interest<var_out$souti)|(gles$political_interest>var_out$souts))
length(llout_political)
# Chunk 28: uniOutIncome
boxplot(gles$income, main = "Boxplot of Variable Income")
var_out<-calcQ(gles$income)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
abline(h=var_out$mouts,col="red")
llout_income<-which((gles$income<var_out$souti)|(gles$income>var_out$souts))
length(llout_income)
# Chunk 29: incomeOutliers
gles[llout_income,][1:10,]
table(gles$income)
# Chunk 30: incomeOutliersFactor
gles$f.incomeOutliers<-0;
gles$f.incomeOutliers[gles$f.income!="Medium_to_High.Sat"]<-1
gles$f.incomeOutliers<-factor(gles$f.incomeOutliers,
labels=c("No.IncomeOutlier","Yes.IncomeOutlier"))
# Chunk 31: mOutMaha
#res.mout <- Moutlier(gles[,c(1:3)]) # Throws error -- We tried to calculate it by combining as well the numerical variables we deleted in chunq "removingCHRVariables" but the same problem happened.
res.mout <- Moutlier(gles[,c(1:2)], quantile = 0.95)
# Chunk 32: mOutCutOff
res.mout$cutoff
# Chunk 33: mOutPlot
par(mfrow=c(1,1))
plot( res.mout$md, res.mout$rd )
text(res.mout$md, res.mout$rd, labels=rownames(df),adj=1, cex=0.5)
abline( h=res.mout$cutoff, lwd=2, col="red")
abline( v=res.mout$cutoff, lwd=2, col="red")
# Chunk 34: detectMout
llmout <- which((res.mout$md > res.mout$cutoff)
& (res.mout$rd > res.mout$cutoff))
gles$f.mout <- 0
gles$f.mout[llmout] <- 1
gles$f.mout <- factor( gles$f.mout, labels = c("MvOut.No","MvOut.Yes"))
# Chunk 35: summaryMout
summary(gles["f.mout"])
# Chunk 36: createVoteOrd
gles$f.vote_ord <- factor(gles$f.vote, ordered = TRUE, levels = c("LINKE", "Gruene", "SPD", "FDP", "CDU/CSU", "AfD"))
# This transformation takes place here and not in the EDA section of the report, for the reason that it was not so clear, that it was necessary, while reading the assignment statement at first. After f.vote factor was converted to an ordinal one with this command, it was checked that the conversion was completed correctly.
# Chunk 37: splitTrainTestSet
set.seed(150996)
#use 70% of dataset as training set and 30% as test set
sample <- sample(c(TRUE, FALSE), nrow(gles), replace=TRUE, prob=c(0.7,0.3))
train  <- gles[sample,]
test   <- gles[!sample,]
# Chunk 38: newImmFactor
gles$f.Imm<-0
ll<-which(gles$egoposition_immigration %in% c(1,2,3))
gles$f.Imm[ll]<-1
ll<-which(gles$egoposition_immigration %in% c(4,5,6))
gles$f.Imm[ll]<-2
ll<-which(gles$egoposition_immigration %in% c(7,8,9))
gles$f.Imm[ll]<-3
ll<-which(gles$egoposition_immigration %in% c(10))
gles$f.Imm[ll]<-4
gles$f.Imm <- factor(gles$f.Imm,labels=c("low", "low_medium", "medium", "medium_high", "high"))
gles$f.Imm <- factor(gles$f.Imm, ordered = TRUE, levels = c("low", "low_medium", "medium", "medium_high", "high"))
# Chunk 39: newPolIntFactor
gles$f.PolInt<-0
ll<-which(gles$political_interest %in% c(1,2,3))
gles$f.PolInt[ll]<-1
ll<-which(gles$political_interest %in% c(4))
gles$f.PolInt[ll]<-2
gles$f.PolInt <- factor(gles$f.PolInt,labels=c("low", "medium", "high"))
gles$f.PolInt <- factor(gles$f.PolInt, ordered = TRUE, levels = c("low", "medium", "high"))
# Chunk 40: newIncSatFactor
gles$f.IncSat<-0
ll<-which(gles$income %in% c(1))
gles$f.IncSat[ll]<-1
ll<-which(gles$income %in% c(2,3))
gles$f.IncSat[ll]<-2
ll<-which(gles$income %in% c(4))
gles$f.IncSat[ll]<-3
gles$f.IncSat <- factor(gles$f.IncSat,labels=c("low", "low_to_medium","medium", "high"))
gles$f.IncSat <- factor(gles$f.IncSat, ordered = TRUE, levels = c("low", "low_to_medium","medium", "high"))
# Chunk 41: splitTrainTestSet2
set.seed(150996)
#use 70% of dataset as training set and 30% as test set
sample <- sample(c(TRUE, FALSE), nrow(gles), replace=TRUE, prob=c(0.7,0.3))
train  <- gles[sample,]
test   <- gles[!sample,]
# Chunk 42: baselineNullModel
nm0 <-multinom(f.vote~1, data=train) # Null model
# Chunk 43: egoImModels
nm1_imm_con <- multinom(f.vote~ egoposition_immigration, data=train)
nm1_imm_con_sq <- multinom(f.vote~ poly(egoposition_immigration,2), data=train)
nm1_imm_con_cb <- multinom(f.vote~ poly(egoposition_immigration,3), data=train)
nm1_imm_con_qd <- multinom(f.vote~ poly(egoposition_immigration,4), data=train)
nm1_imm_cat <- multinom(f.vote~ f.egoposition_immigration, data=train)
nm1_imm_cat_new <- multinom(f.vote~ f.Imm, data=train)
# Chunk 44: egoImAIC
nm0$dev - nm1_imm_cat$dev
nm0$dev - nm1_imm_cat_new$dev
AIC(nm0, nm1_imm_con, nm1_imm_con_sq,
nm1_imm_con_cb, nm1_imm_con_qd,
nm1_imm_cat, nm1_imm_cat_new)
# Chunk 45: polIntModels
nm1_polint_con <- multinom(f.vote~ political_interest, data=train)
nm1_polint_con_sq <- multinom(f.vote~ poly(political_interest,2), data=train)
nm1_polint_con_cb <- multinom(f.vote~ poly(political_interest,3), data=train)
nm1_polint_con_qd <- multinom(f.vote~ poly(political_interest,4), data=train)
nm1_polint_cat <- multinom(f.vote~ f.political_interest, data=train)
nm1_polint_cat_new <- multinom(f.vote~ f.PolInt, data=train)
# Chunk 46: polIntAIC
AIC(nm0, nm1_polint_con,
nm1_polint_con_sq, nm1_polint_con_cb,
nm1_polint_con_qd, nm1_polint_cat, nm1_polint_cat_new)
# nm1_polint_con_sq is better, but in general
# politican interest does not provide predictability power,
# null model is better in most of the cases.
# Political interest will be used in squared form.
# Chunk 47: IncSatModels
nm1_inc_con <- multinom(f.vote~ income, data=train)
nm1_inc_con_sq <- multinom(f.vote~ poly(income,2), data=train)
nm1_inc_con_cb <- multinom(f.vote~ poly(income,3), data=train)
nm1_inc_con_qd <- multinom(f.vote~ poly(income,4), data=train)
nm1_inc_cat <- multinom(f.vote~ f.income, data=train)
nm1_inc_cat_new <- multinom(f.vote~ f.IncSat, data=train)
# Chunk 48: IncSatAIC
AIC(nm0, nm1_inc_con, nm1_inc_con_sq,
nm1_inc_con_cb, nm1_inc_con_qd,
nm1_inc_cat, nm1_inc_cat_new)
# nm1_inc_con is better
# Chunk 49: nominalModelTraining
nm1 <-multinom(f.vote~
(poly(political_interest,2) + income)*
(f.Imm +
f.eastGermany +
f.gender)
,data= train)
summary(nm1)
nm_final <- step(nm1)
# Chunk 50: finalNominalModel
summary(nm_final)
# Chunk 51: allEffectsNominalFinal1
x<-allEffects(nm_final)
par(mfrow=c(1,1))
plot(x[1],ask=FALSE,
multiline=T, main="Effects of Political Interest", ci.style="band")
# Chunk 52: allEffectsNominalFinal2
par(mfrow=c(1,1))
plot(x[2],ask=FALSE,
multiline=T, main="Effects of Income", ci.style="band")
# Chunk 53: allEffectsNominalFinal3
par(mfrow=c(1,1))
plot(x[3],ask=FALSE,
multiline=T, main="Effects of Egoposition Immigration", ci.style="band")
# Chunk 54: allEffectsNominalFinal4
par(mfrow=c(1,1))
plot(x[4],ask=FALSE,
multiline=T, main="Effects of East Germany", ci.style="band")
# Chunk 55: allEffectsNominalFinal5
par(mfrow=c(1,1))
plot(x[5],ask=FALSE,
multiline=T, main="Effects of Gender", ci.style="band")
# Chunk 56: nominalModelMeasuresTrain
tt<-table(predict(nm_final),train$f.vote);tt
acc<-"Accuracy:";acc;train_accuracy <- 100*sum(diag(tt))/sum(tt); train_accuracy
prec<-"Precision:";prec;train_precision <- diag(tt) / rowSums(tt); train_precision
mr<-"MissClassification Rate:";mr;train_mr <- 100-train_accuracy; train_mr
# Chunk 57: histOfProb
party_probs <- predict(nm_final, type="probs")
hist(party_probs)
# Chunk 58: nominalModelMeasuresTest
tt_test<-table(predict(nm_final, newdata = test),test$f.vote);tt_test
acc<-"Accuracy:";acc;test_accuracy <- 100*sum(diag(tt_test))/sum(tt_test); test_accuracy
prec<-"Precision:";prec;test_precision <- diag(tt_test) / rowSums(tt_test); test_precision
mr<-"MissClassification Rate:";mr;test_mr <- 100-test_accuracy; test_mr
# Chunk 59: voteOrdBaseline
table(train$f.vote_ord)
# Chunk 60: baselineNullModelOrd
om0 <- polr(f.vote_ord ~1, data=train) # Null model
# Chunk 61: egoImModelsOrd
om1_imm_con <- polr(f.vote_ord~ egoposition_immigration, data=train)
om1_imm_con_sq <- polr(f.vote_ord~ poly(egoposition_immigration,2), data=train)
om1_imm_con_cb <- polr(f.vote_ord~ poly(egoposition_immigration,3), data=train)
om1_imm_con_qd <- polr(f.vote_ord~ poly(egoposition_immigration,4), data=train)
om1_imm_cat <- polr(f.vote_ord~ f.egoposition_immigration, data=train)
om1_imm_cat_new <- polr(f.vote_ord~ f.Imm, data=train)
# Chunk 62
om0$dev - om1_imm_cat$dev
om0$dev - om1_imm_cat_new$dev
# Chunk 63
AIC(om0, om1_imm_con, om1_imm_con_sq,
om1_imm_con_cb, om1_imm_con_qd,
om1_imm_cat, om1_imm_cat_new)
# Chunk 64: polIntModelsOrd
om1_polint_con <- polr(f.vote_ord~ political_interest, data=train)
om1_polint_con_sq <- polr(f.vote_ord~ poly(political_interest,2), data=train)
om1_polint_con_cb <- polr(f.vote_ord~ poly(political_interest,3), data=train)
om1_polint_con_qd <- polr(f.vote_ord~ poly(political_interest,4), data=train)
om1_polint_cat <- polr(f.vote_ord~ f.political_interest, data=train)
om1_polint_cat_new <- polr(f.vote_ord~ f.PolInt, data=train)
# Chunk 65: polIntAICOrd
AIC(om0, om1_polint_con,
om1_polint_con_sq, om1_polint_con_cb,
om1_polint_con_qd, om1_polint_cat, om1_polint_cat_new)
# om1_polint_con_sq is better, but in general
# politican interest does not provide predictability power,
# null model is better in most of the cases.
# Political interest will be used in squared form.
# Chunk 66: IncSatModelsOrd
om1_inc_con <- polr(f.vote_ord~ income, data=train)
om1_inc_con_sq <- polr(f.vote_ord~ poly(income,2), data=train)
om1_inc_con_cb <- polr(f.vote_ord~ poly(income,3), data=train)
om1_inc_con_qd <- polr(f.vote_ord~ poly(income,4), data=train)
om1_inc_cat <- polr(f.vote_ord~ f.income, data=train)
om1_inc_cat_new <- polr(f.vote_ord~ f.IncSat, data=train)
# Chunk 67: IncSatAICOrd
AIC(om0, om1_inc_con, om1_inc_con_sq,
om1_inc_con_cb, om1_inc_con_qd,
om1_inc_cat, om1_inc_cat_new)
anova(om1_inc_con, om1_inc_con_sq, test="Chisq")
# om1_inc_con_sq is better with AIC,
# but anova shows 1st order.
# Income satisfaction will be used as a
# first order numerical variable
# Chunk 68: ordinalTraining
om1 <-polr(f.vote_ord~
(poly(political_interest,2) + income)*
(f.Imm +
f.eastGermany +
f.gender)
,data= train)
summary(om1)
om_final <- step(om1)
# Chunk 69: finalOrdinalModel
summary(om_final)
# Chunk 70: allEffectsOrdFinal1
y<-allEffects(om_final)
par(mfrow=c(1,1))
plot(y[1],ask=FALSE,
multiline=T, main="Effects of Income", ci.style="band")
# Chunk 71: allEffectsOrdFinal2
par(mfrow=c(1,1))
plot(y[2],ask=FALSE,
multiline=T, main="Effects of Gender", ci.style="band")
# Chunk 72: allEffectsOrdFinal3
par(mfrow=c(1,1))
plot(y[3],ask=FALSE,
multiline=T, main="Effects of Interactions (Imm - PolInt)", ci.style="band")
# Chunk 73: ordinalModelMeasuresord_train
ord_tt<-table(predict(om_final),train$f.vote_ord);ord_tt
acc<-"Accuracy:";acc;ord_train_accuracy <- 100*sum(diag(ord_tt))/sum(ord_tt);ord_train_accuracy
prec<-"Precision:";prec;ord_train_precision <- diag(ord_tt) / rowSums(ord_tt);ord_train_precision
mr<-"MissClassification Rate:";mr;ord_train_mr <- 100-ord_train_accuracy;ord_train_mr
# Chunk 74: histOfProbOrd
ord_party_probs <- predict(om_final, type="probs")
hist(ord_party_probs)
# Chunk 75: ordinalModelMeasuresord_test
ord_tt_ord_test<-table(predict(om_final, newdata = test),test$f.vote_ord);ord_tt_ord_test
acc<-"Accuracy:";acc;ord_test_accuracy <- 100*sum(diag(ord_tt_ord_test))/sum(ord_tt_ord_test); ord_test_accuracy
prec<-"Precision:";prec;ord_test_precision <- diag(ord_tt_ord_test) / rowSums(ord_tt_ord_test); ord_test_precision
mr<-"MissClassification Rate:";mr;ord_test_mr <- 100-ord_test_accuracy; ord_test_mr
# Chunk 76: centerBinary
gles$bwing<-ifelse(gles$f.political_orientation=="Center_Wing",1,0)
gles$bwing<-factor(gles$bwing,labels=c("Left_Right_Wings","Center_Wing"))
# Chunk 77: splitTrainTestSet3
set.seed(150996)
#use 70% of dataset as training set and 30% as test set
sample <- sample(c(TRUE, FALSE), nrow(gles), replace=TRUE, prob=c(0.7,0.3))
train  <- gles[sample,]
test   <- gles[!sample,]
# Chunk 78: bhmodelsEgIm
bhm0 <- glm( bwing ~ 1, family = binomial, data = train)
bhm1_imm_con <- glm( bwing ~ egoposition_immigration, family = binomial, data = train)
bhm1_imm_con_sq <- glm( bwing ~ poly(egoposition_immigration,2), family = binomial, data = train)
bhm1_imm_con_cb <- glm( bwing ~ poly(egoposition_immigration,3), family = binomial, data = train)
bhm1_imm_con_qd <- glm( bwing ~ poly(egoposition_immigration,4), family = binomial, data = train)
bhm1_imm_cat <- glm( bwing ~ f.egoposition_immigration, family = binomial, data = train)
bhm1_imm_cat_new <- glm( bwing ~ f.Imm, family = binomial, data = train)
# Chunk 79: egoImDevH
bhm0$dev - bhm1_imm_con_sq$dev
bhm0$dev - bhm1_imm_cat_new$dev
# Chunk 80: egoImAICH
AIC(bhm0, bhm1_imm_con, bhm1_imm_con_sq,
bhm1_imm_con_cb, bhm1_imm_con_qd,
bhm1_imm_cat, bhm1_imm_cat_new)
# Chunk 81: bhmodelsPolInt
bhm1_polint_con <- glm( bwing ~ political_interest, family = binomial, data = train)
bhm1_polint_con_sq <- glm( bwing ~ poly(political_interest,2), family = binomial, data = train)
bhm1_polint_con_cb <- glm( bwing ~ poly(political_interest,3), family = binomial, data = train)
bhm1_polint_con_qd <- glm( bwing ~ poly(political_interest,4), family = binomial, data = train)
bhm1_polint_cat <- glm( bwing ~ f.political_interest, family = binomial, data = train)
bhm1_polint_cat_new <- glm( bwing ~ f.PolInt, family = binomial, data = train)
# Chunk 82: polIntAICH
AIC(bhm0, bhm1_polint_con, bhm1_polint_con_sq,
bhm1_polint_con_cb, bhm1_polint_con_qd,
bhm1_polint_cat, bhm1_polint_cat_new)
# Chunk 83: bhmodelsInc
bhm1_inc_con <- glm( bwing ~ income, family = binomial, data = train)
bhm1_inc_con_sq <- glm( bwing ~ poly(income,2), family = binomial, data = train)
bhm1_inc_con_cb <- glm( bwing ~ poly(income,3), family = binomial, data = train)
bhm1_inc_con_qd <- glm( bwing ~ poly(income,4), family = binomial, data = train)
bhm1_inc_cat <- glm( bwing ~ f.income, family = binomial, data = train)
bhm1_inc_cat_new <- glm( bwing ~ f.IncSat, family = binomial, data = train)
# Chunk 84: incAICH1
AIC(bhm0, bhm1_inc_con, bhm1_inc_con_sq,
bhm1_inc_con_cb, bhm1_inc_con_qd,
bhm1_inc_cat, bhm1_inc_cat_new)
# Chunk 85: hierarchicalTrainingLayer1
bhm1 <- glm( bwing ~ (poly(political_interest,3) + income)*
(f.Imm + f.eastGermany + f.gender),
family = binomial, data = train)
layer1 <- step(bhm1)
# Chunk 86: layer1summary
summary(layer1)
# Chunk 87
Anova( layer1, test="LR" )
plot(allEffects( layer1 ))
# Chunk 88
bh2m0 <- glm( f.political_orientation ~ 1, family = binomial, data = train[train$bwing=="Left_Right_Wings",])
# Chunk 89: bhmodels2EgIm
bhm2_imm_con <- glm( f.political_orientation ~ egoposition_immigration, family = binomial, data = train[train$bwing=="Left_Right_Wings",])
bhm2_imm_con_sq <- glm( f.political_orientation ~ poly(egoposition_immigration,2), family = binomial, data = train[train$bwing=="Left_Right_Wings",])
bhm2_imm_con_cb <- glm( f.political_orientation ~ poly(egoposition_immigration,3), family = binomial, data = train[train$bwing=="Left_Right_Wings",])
bhm2_imm_con_qd <- glm( f.political_orientation ~ poly(egoposition_immigration,4), family = binomial, data = train[train$bwing=="Left_Right_Wings",])
bhm2_imm_cat <- glm( f.political_orientation ~ f.egoposition_immigration, family = binomial, data = train[train$bwing=="Left_Right_Wings",])
bhm2_imm_cat_new <- glm( f.political_orientation ~ f.Imm, family = binomial, data = train[train$bwing=="Left_Right_Wings",])
# Chunk 90: egoImDevH1
bh2m0$dev - bhm2_imm_con_sq$dev
bh2m0$dev - bhm2_imm_cat_new$dev
# Chunk 91: egoImAICH1
AIC(bh2m0, bhm2_imm_con, bhm2_imm_con_sq,
bhm2_imm_con_cb, bhm2_imm_con_qd,
bhm2_imm_cat, bhm2_imm_cat_new)
# Chunk 92: bhmodels2PolInt
bhm2_polint_con <- glm( f.political_orientation ~ political_interest, family = binomial, data = train[train$bwing=="Left_Right_Wings",])
bhm2_polint_con_sq <- glm( f.political_orientation ~ poly(political_interest,2), family = binomial, data = train[train$bwing=="Left_Right_Wings",])
bhm2_polint_con_cb <- glm( f.political_orientation ~ poly(political_interest,3), family = binomial, data = train[train$bwing=="Left_Right_Wings",])
bhm2_polint_con_qd <- glm( f.political_orientation ~ poly(political_interest,4), family = binomial, data = train[train$bwing=="Left_Right_Wings",])
bhm2_polint_cat <- glm( f.political_orientation ~ f.political_interest, family = binomial, data = train[train$bwing=="Left_Right_Wings",])
bhm2_polint_cat_new <- glm( f.political_orientation ~ f.PolInt, family = binomial, data = train[train$bwing=="Left_Right_Wings",])
# Chunk 93: polIntDevH
bh2m0$dev - bhm2_polint_con_sq$dev
bh2m0$dev - bhm2_polint_cat_new$dev
# Chunk 94: polIntAICH1
AIC(bh2m0, bhm2_polint_con, bhm2_polint_con_sq,
bhm2_polint_con_cb, bhm2_polint_con_qd,
bhm2_polint_cat, bhm2_polint_cat_new)
# Chunk 95: bhmodels2Inc
bhm2_inc_con <- glm( f.political_orientation ~ income, family = binomial, data = train[train$bwing=="Left_Right_Wings",])
bhm2_inc_con_sq <- glm( f.political_orientation ~ poly(income,2), family = binomial, data = train[train$bwing=="Left_Right_Wings",])
bhm2_inc_con_cb <- glm( f.political_orientation ~ poly(income,3), family = binomial, data = train[train$bwing=="Left_Right_Wings",])
bhm2_inc_con_qd <- glm( f.political_orientation ~ poly(income,4), family = binomial, data = train[train$bwing=="Left_Right_Wings",])
bhm2_inc_cat <- glm( f.political_orientation ~ f.income, family = binomial, data = train[train$bwing=="Left_Right_Wings",])
bhm2_inc_cat_new <- glm( f.political_orientation ~ f.IncSat, family = binomial, data = train[train$bwing=="Left_Right_Wings",])
# Chunk 96: incDevH
bh2m0$dev - bhm2_inc_con_sq$dev
bh2m0$dev - bhm2_inc_cat_new$dev
# Chunk 97: incAICH
AIC(bh2m0, bhm2_inc_con, bhm2_inc_con_sq,
bhm2_inc_con_cb, bhm2_inc_con_qd,
bhm2_inc_cat, bhm2_inc_cat_new)
# Chunk 98: hierarchicalTrainingLayer2
bhm2 <- glm( f.political_orientation ~ f.Imm + f.PolInt + f.eastGermany + f.gender, family = binomial, data = train[train$bwing=="Left_Right_Wings",])
layer2 <- step(bhm2)
# Chunk 99: layer2summary
summary(layer2)
influenceIndexPlot(layer1)
influenceIndexPlot(layer1,id=list(n=5),vars=c("Cook", "Student","hat"))
influencePlot(layer1,id=list(method="noteworthy", n=5))
influenceIndexPlot(layer1)
influenceIndexPlot(layer1,id=list(n=5),vars=c("Cook", "Student","hat"))
influencePlot(layer1,id=list(method="noteworthy"))
influencePlot(layer1,id=list(method="noteworthy"))
influenceIndexPlot(layer1,id=list(n=5),vars=c("Cook", "Student","hat"))
influenceIndexPlot(layer1,vars=c("Cook", "Student","hat"))
influenceIndexPlot(layer1,vars=c("Cook", "Student","hat"))
influenceIndexPlot(layer1,id=list(n=50),vars=c("Cook", "Student","hat"))
influenceIndexPlot(layer1,id=list(n=20),vars=c("Cook", "Student","hat"))
influencePlot(layer1,id=list(method="noteworthy"))
influenceIndexPlot(layer1)
residualPlots(layer2, layout=c(1, 2))
avPlots(layer2,id=list(labels=row.names(dfage), n=5))
avPlots(layer2,id=list(n=5))
residualPlots(layer1, layout=c(1, 2))
influencePlot(layer1,id=list(method="noteworthy"))
